#+title: Readme

This integrates gptel into org babel by providing convenience features for fixing errors in org babel cells. This has been tested with python and bash, though should be language agnostic.

In particular, this provides commands to send the cell and the output to gptel, get a correction, and apply that as a patch.

It is also possible to send the request for a correction automatically on an error, though currently only for python (see below).

[[recording.gif]]

* Installation:

** With straight.el
#+begin_src emacs-lisp :tangle yes
(package! gpt-babel
  :recipe (:host github
           :repo "ElleNajt/gpt-babel"
           :branch "main"))
#+end_src

** TODO Melpa
* Set up

Use :result output if you want the results of the output to be included in the message to GPT.

This requires gptel-default-mode to be set to org-mode to work, since it expects an org block in the response.

#+begin_src emacs-lisp :tangle yes :results output drawer
(gptel-default-mode 'org-mode)
#+end_src

The conversation happens in the *CELL ERRORS* buffer.

| Key         | Command               | Description                                   |
|-------------+-----------------------+-----------------------------------------------|
| ~SPC o g s~ | ~gpt-babel/send-block~ | Send block to GPTel, and ask for a fix.       |
| ~SPC o g p~ | ~gpt-babel/patch-block~ | Apply the fix                                 |
| ~SPC o g f~ | ~gpt-babel/fix-block~ | Do the two things at once                     |
| ~SPC o g i~ | ~gpt-babel/fix-with-instructions~ | Modify the block based on comments            |
| ~SPC o g w~ | ~gpt-babel/wish-complete~ | Turn the todos in the block into working code |

Configure error handling with:

#+begin_src elisp
(setq gpt-babel/error-action 'send)  ; Options: nil, 'send, or 'fix
#+end_src

When set to 'send, blocks with errors will be automatically sent to GPT for analysis.
When set to 'fix, blocks with errors will be sent to GPT, and the patch window will pop up automatically.
When nil (default), no automatic action is taken on errors.

Automatic handling can lead to unnecessary GPT API costs -- be careful!

* Setting up automatic error processing:
** Python:
Needs no additional set up -- gpt calls get triggered when "Traceback (most recent call last)" appears in the output.
** Bash:
Requires adding a prologue to source like blocks like `:prologue "trap 'echo Shell Error' ERR;"`
However, this only catches some kinds of errors -- perhaps a bash wizard can intervene.
** Adding a language
PRs are welcome - Just add to the variable `org-babel-error-patterns` , and add instructions on how to get the relevant output string.
(If someone knows a more general way to detect cell blocks failing, please let me know!)
