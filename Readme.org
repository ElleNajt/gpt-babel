#+title: Readme

This integrates gptel into org babel by providing convenience features for fixing errors in org babel cells.

In particular, this provides commands to send the cell and the output to gptel, get a correction, and apply that as a patch.

It is also possible to send the request for a correction automatically on an error, though currently only for python.

This has been tested with python and bash, though should be language agnostic. The automatic response on errors has only been tested with python and bash, and requires some means for detecting an error (see the variable org-babel-error-patterns and set up below). PRs are welcome!

* Installation:

** With straight.el
#+begin_src emacs-lisp :tangle yes
(package! gpt-babel
  :recipe (:host github
           :repo "ElleNajt/gpt-babel"
           :branch "main"))
#+end_src

** TODO Melpa
* Set up

Use :result output if you want the results of the output to be included in the message to GPT.

This requires gptel-default-mode to be set to org-mode to work, since it expects an org block in the response.

#+begin_src emacs-lisp :tangle yes
(gptel-default-mode 'org-mode)
#+end_src

The conversation happens in the *CELL ERRORS* buffer.

| Key         | Command               | Description                             |
|-------------+-----------------------+-----------------------------------------|
| ~SPC o c s~ | ~send-block-to-gptel~ | Send block to GPTel, and ask for a fix. |
| ~SPC o c p~ | ~patch-gptel-blocks~  | Apply the fix                           |
| ~SPC o c f~ | ~gptel-fix-block~     | Do the two things at once               |


Configure error handling with:

#+begin_src elisp
(setq gpt-babel/error-action 'send)  ; Options: nil, 'send, or 'fix
#+end_src

When set to 'send, blocks with errors will be automatically sent to GPT for analysis.
When set to 'fix, blocks with errors will be sent to GPT, and the patch window will pop up automatically.
When nil (default), no automatic action is taken on errors.

Note: Automatic handling can increase API usage and costs. Use with caution!

* Setting up automatic error processing:
** Python:
Needs no additional set up -- gpt calls get triggered when "Traceback (most recent call last)" appears in the output.

** Bash:
Requires adding a prologue to source like blocks like so:

#+begin_src emacs-lisp :tangle yes
#+begin_src bash :prologue "trap 'echo Shell Error' ERR;"
#+end_src
#+end_src

This is unsatisfying; ideally there would be some way to detect a nonzero return code in a block that worked across languages.
